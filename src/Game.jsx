import { useReducer, useCallback } from "react";
import initialState from "./logic/state";
import gameEventsReducer from "./logic/eventsReducer";
import useGameLoop from "./hooks/useGameLoop";
import useIncidentLogger from "./hooks/useIncidentLogger";
import useGameClock from "./hooks/useGameClock";

export default function Game() {
  const [state, dispatch] = useReducer(gameEventsReducer, initialState);

  // –º–µ–º–æ–∏–∑–∏—Ä—É–µ–º —Ç–∏–∫ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
  const handleTick = useCallback(() => {
    dispatch({ type: "TICK" });
  }, []);

  // —Ö—É–∫ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
  useGameLoop(state.pause, state.settings.tick, handleTick);

  // –ª–æ–≥ –Ω–æ–≤—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
  useIncidentLogger(state.incidents, state.incidentsVersion);

  // –∏–≥—Ä–æ–≤–æ–µ –≤—Ä–µ–º—è
  const { currentGameTime, daysPassed, formatIncidentTime } = useGameClock(
    state.clock
  );

  return (
    <main className="box">
      <h1>TheGame</h1>
      <div className="line">Loops: {state.ticks}</div>
      <div className="line">Current time: {currentGameTime}</div>
      <div className="line">Days passed: {daysPassed}</div>
      <div className="line">Budget: {state.budget}</div>

      <div className="controls">
        <button onClick={() => dispatch({ type: "PAUSE" })}>
          {state.pause ? "‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç" : "‚è∏Ô∏è –ü–∞—É–∑–∞"}
        </button>
        <button
          onClick={() => dispatch({ type: "RESET" })}
          style={{ marginLeft: 8 }}
        >
          üîÑ –°–±—Ä–æ—Å–∏—Ç—å
        </button>
      </div>

      <div className="characters">
        <h2>Characters</h2>
        <ul>
          {state.characters.map((character) => (
            <li key={character.id}>
              {character.name}{" "}
              <button
                onClick={() =>
                  dispatch({
                    type: "TOGGLE_TASK",
                    payload: { id: character.id },
                  })
                }
              >
                {character.task ? "–û—Ç–¥—ã—Ö–∞—Ç—å" : "–†–∞–±–æ—Ç–∞—Ç—å"}
              </button>{" "}
              stamina {character.stamina}{" "}
            </li>
          ))}
        </ul>
      </div>

      <div>
        <h2>–ò–≥—Ä–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è {state.incidentsVersion}</h2>
        <ul className="line">
          {state.incidents.length > 0 &&
            state.incidents.map((incident) => (
              <li key={incident.id}>
                {formatIncidentTime(incident.atMs, state.clock.startEpochMs)}
                {" - "}
                {incident.message}
              </li>
            ))}
        </ul>
      </div>
    </main>
  );
}
